// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Areas", testAreas)
	t.Run("Listings", testListings)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestSoftDelete(t *testing.T) {}

func TestQuerySoftDeleteAll(t *testing.T) {}

func TestSliceSoftDeleteAll(t *testing.T) {}

func TestDelete(t *testing.T) {
	t.Run("Areas", testAreasDelete)
	t.Run("Listings", testListingsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Areas", testAreasQueryDeleteAll)
	t.Run("Listings", testListingsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Areas", testAreasSliceDeleteAll)
	t.Run("Listings", testListingsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Areas", testAreasExists)
	t.Run("Listings", testListingsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Areas", testAreasFind)
	t.Run("Listings", testListingsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Areas", testAreasBind)
	t.Run("Listings", testListingsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Areas", testAreasOne)
	t.Run("Listings", testListingsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Areas", testAreasAll)
	t.Run("Listings", testListingsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Areas", testAreasCount)
	t.Run("Listings", testListingsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Areas", testAreasInsert)
	t.Run("Areas", testAreasInsertWhitelist)
	t.Run("Listings", testListingsInsert)
	t.Run("Listings", testListingsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ListingToAreaUsingArea", testListingToOneAreaUsingArea)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AreaToListings", testAreaToManyListings)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ListingToAreaUsingListings", testListingToOneSetOpAreaUsingArea)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ListingToAreaUsingListings", testListingToOneRemoveOpAreaUsingArea)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AreaToListings", testAreaToManyAddOpListings)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AreaToListings", testAreaToManySetOpListings)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AreaToListings", testAreaToManyRemoveOpListings)
}

func TestReload(t *testing.T) {
	t.Run("Areas", testAreasReload)
	t.Run("Listings", testListingsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Areas", testAreasReloadAll)
	t.Run("Listings", testListingsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Areas", testAreasSelect)
	t.Run("Listings", testListingsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Areas", testAreasUpdate)
	t.Run("Listings", testListingsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Areas", testAreasSliceUpdateAll)
	t.Run("Listings", testListingsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
