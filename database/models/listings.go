// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Listing is an object representing the database table.
type Listing struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AreaID         int       `boil:"area_id" json:"area_id" toml:"area_id" yaml:"area_id"`
	Price          int       `boil:"price" json:"price" toml:"price" yaml:"price"`
	ListingData    null.JSON `boil:"listing_data" json:"listing_data,omitempty" toml:"listing_data" yaml:"listing_data,omitempty"`
	ListingDetails null.JSON `boil:"listing_details" json:"listing_details,omitempty" toml:"listing_details" yaml:"listing_details,omitempty"`
	DateAccessed   time.Time `boil:"date_accessed" json:"date_accessed" toml:"date_accessed" yaml:"date_accessed"`

	R *listingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListingColumns = struct {
	ID             string
	AreaID         string
	Price          string
	ListingData    string
	ListingDetails string
	DateAccessed   string
}{
	ID:             "id",
	AreaID:         "area_id",
	Price:          "price",
	ListingData:    "listing_data",
	ListingDetails: "listing_details",
	DateAccessed:   "date_accessed",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ListingWhere = struct {
	ID             whereHelperint
	AreaID         whereHelperint
	Price          whereHelperint
	ListingData    whereHelpernull_JSON
	ListingDetails whereHelpernull_JSON
	DateAccessed   whereHelpertime_Time
}{
	ID:             whereHelperint{field: "\"listings\".\"id\""},
	AreaID:         whereHelperint{field: "\"listings\".\"area_id\""},
	Price:          whereHelperint{field: "\"listings\".\"price\""},
	ListingData:    whereHelpernull_JSON{field: "\"listings\".\"listing_data\""},
	ListingDetails: whereHelpernull_JSON{field: "\"listings\".\"listing_details\""},
	DateAccessed:   whereHelpertime_Time{field: "\"listings\".\"date_accessed\""},
}

// ListingRels is where relationship names are stored.
var ListingRels = struct {
	Area string
}{
	Area: "Area",
}

// listingR is where relationships are stored.
type listingR struct {
	Area *Area `boil:"Area" json:"Area" toml:"Area" yaml:"Area"`
}

// NewStruct creates a new relationship struct
func (*listingR) NewStruct() *listingR {
	return &listingR{}
}

// listingL is where Load methods for each relationship are stored.
type listingL struct{}

var (
	listingAllColumns            = []string{"id", "area_id", "price", "listing_data", "listing_details", "date_accessed"}
	listingColumnsWithoutDefault = []string{"area_id", "price", "listing_data", "listing_details"}
	listingColumnsWithDefault    = []string{"id", "date_accessed"}
	listingPrimaryKeyColumns     = []string{"id"}
)

type (
	// ListingSlice is an alias for a slice of pointers to Listing.
	// This should generally be used opposed to []Listing.
	ListingSlice []*Listing

	listingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listingType                 = reflect.TypeOf(&Listing{})
	listingMapping              = queries.MakeStructMapping(listingType)
	listingPrimaryKeyMapping, _ = queries.BindMapping(listingType, listingMapping, listingPrimaryKeyColumns)
	listingInsertCacheMut       sync.RWMutex
	listingInsertCache          = make(map[string]insertCache)
	listingUpdateCacheMut       sync.RWMutex
	listingUpdateCache          = make(map[string]updateCache)
	listingUpsertCacheMut       sync.RWMutex
	listingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single listing record from the query.
func (q listingQuery) One(exec boil.Executor) (*Listing, error) {
	o := &Listing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for listings")
	}

	return o, nil
}

// All returns all Listing records from the query.
func (q listingQuery) All(exec boil.Executor) (ListingSlice, error) {
	var o []*Listing

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Listing slice")
	}

	return o, nil
}

// Count returns the count of all Listing records in the query.
func (q listingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q listingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if listings exists")
	}

	return count > 0, nil
}

// Area pointed to by the foreign key.
func (o *Listing) Area(mods ...qm.QueryMod) areaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AreaID),
	}

	queryMods = append(queryMods, mods...)

	query := Areas(queryMods...)
	queries.SetFrom(query.Query, "\"areas\"")

	return query
}

// LoadArea allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (listingL) LoadArea(e boil.Executor, singular bool, maybeListing interface{}, mods queries.Applicator) error {
	var slice []*Listing
	var object *Listing

	if singular {
		object = maybeListing.(*Listing)
	} else {
		slice = *maybeListing.(*[]*Listing)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &listingR{}
		}
		args = append(args, object.AreaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listingR{}
			}

			for _, a := range args {
				if a == obj.AreaID {
					continue Outer
				}
			}

			args = append(args, obj.AreaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`areas`),
		qm.WhereIn(`areas.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Area")
	}

	var resultSlice []*Area
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Area")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for areas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for areas")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Area = foreign
		if foreign.R == nil {
			foreign.R = &areaR{}
		}
		foreign.R.Listings = append(foreign.R.Listings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AreaID == foreign.ID {
				local.R.Area = foreign
				if foreign.R == nil {
					foreign.R = &areaR{}
				}
				foreign.R.Listings = append(foreign.R.Listings, local)
				break
			}
		}
	}

	return nil
}

// SetArea of the listing to the related item.
// Sets o.R.Area to related.
// Adds o to related.R.Listings.
func (o *Listing) SetArea(exec boil.Executor, insert bool, related *Area) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"area_id"}),
		strmangle.WhereClause("\"", "\"", 2, listingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AreaID = related.ID
	if o.R == nil {
		o.R = &listingR{
			Area: related,
		}
	} else {
		o.R.Area = related
	}

	if related.R == nil {
		related.R = &areaR{
			Listings: ListingSlice{o},
		}
	} else {
		related.R.Listings = append(related.R.Listings, o)
	}

	return nil
}

// Listings retrieves all the records using an executor.
func Listings(mods ...qm.QueryMod) listingQuery {
	mods = append(mods, qm.From("\"listings\""))
	return listingQuery{NewQuery(mods...)}
}

// FindListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindListing(exec boil.Executor, iD int, selectCols ...string) (*Listing, error) {
	listingObj := &Listing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, listingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from listings")
	}

	return listingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Listing) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no listings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(listingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listingInsertCacheMut.RLock()
	cache, cached := listingInsertCache[key]
	listingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listingAllColumns,
			listingColumnsWithDefault,
			listingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listingType, listingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into listings")
	}

	if !cached {
		listingInsertCacheMut.Lock()
		listingInsertCache[key] = cache
		listingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Listing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Listing) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	listingUpdateCacheMut.RLock()
	cache, cached := listingUpdateCache[key]
	listingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listingAllColumns,
			listingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, listingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, append(wl, listingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for listings")
	}

	if !cached {
		listingUpdateCacheMut.Lock()
		listingUpdateCache[key] = cache
		listingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q listingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, listingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in listing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all listing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Listing) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no listings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(listingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listingUpsertCacheMut.RLock()
	cache, cached := listingUpsertCache[key]
	listingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			listingAllColumns,
			listingColumnsWithDefault,
			listingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			listingAllColumns,
			listingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(listingPrimaryKeyColumns))
			copy(conflict, listingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listingType, listingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert listings")
	}

	if !cached {
		listingUpsertCacheMut.Lock()
		listingUpsertCache[key] = cache
		listingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Listing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Listing) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Listing provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listingPrimaryKeyMapping)
	sql := "DELETE FROM \"listings\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q listingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no listingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from listing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for listings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Listing) Reload(exec boil.Executor) error {
	ret, err := FindListing(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"listings\".* FROM \"listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ListingSlice")
	}

	*o = slice

	return nil
}

// ListingExists checks if the Listing row exists.
func ListingExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"listings\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if listings exists")
	}

	return exists, nil
}
