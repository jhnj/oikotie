// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testListings(t *testing.T) {
	t.Parallel()

	query := Listings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testListingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Listings().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListingSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ListingExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Listing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ListingExists to return true, but got false.")
	}
}

func testListingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	listingFound, err := FindListing(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if listingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testListingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Listings().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testListingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Listings().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testListingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	listingOne := &Listing{}
	listingTwo := &Listing{}
	if err = randomize.Struct(seed, listingOne, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}
	if err = randomize.Struct(seed, listingTwo, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = listingOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listingTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Listings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testListingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	listingOne := &Listing{}
	listingTwo := &Listing{}
	if err = randomize.Struct(seed, listingOne, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}
	if err = randomize.Struct(seed, listingTwo, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = listingOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listingTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testListingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(listingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListingToOneAreaUsingArea(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Listing
	var foreign Area

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, areaDBTypes, false, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AreaID, foreign.AreaID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Area().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.AreaID, foreign.AreaID) {
		t.Errorf("want: %v, got %v", foreign.AreaID, check.AreaID)
	}

	slice := ListingSlice{&local}
	if err = local.L.LoadArea(tx, false, (*[]*Listing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Area == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Area = nil
	if err = local.L.LoadArea(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Area == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testListingToOneSetOpAreaUsingArea(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Listing
	var b, c Area

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Area{&b, &c} {
		err = a.SetArea(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Area != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Listings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AreaID, x.AreaID) {
			t.Error("foreign key was wrong value", a.AreaID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AreaID))
		reflect.Indirect(reflect.ValueOf(&a.AreaID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AreaID, x.AreaID) {
			t.Error("foreign key was wrong value", a.AreaID, x.AreaID)
		}
	}
}

func testListingToOneRemoveOpAreaUsingArea(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Listing
	var b Area

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetArea(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveArea(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Area().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Area != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AreaID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Listings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testListingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testListingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListingSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testListingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Listings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	listingDBTypes = map[string]string{`ID`: `integer`, `AreaID`: `integer`, `Price`: `integer`, `ListingData`: `jsonb`, `ListingDetails`: `jsonb`, `DateAccessed`: `date`}
	_              = bytes.MinRead
)

func testListingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(listingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(listingAllColumns) == len(listingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listingDBTypes, true, listingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testListingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(listingAllColumns) == len(listingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Listing{}
	if err = randomize.Struct(seed, o, listingDBTypes, true, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listingDBTypes, true, listingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(listingAllColumns, listingPrimaryKeyColumns) {
		fields = listingAllColumns
	} else {
		fields = strmangle.SetComplement(
			listingAllColumns,
			listingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ListingSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testListingsUpsert(t *testing.T) {
	t.Parallel()

	if len(listingAllColumns) == len(listingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Listing{}
	if err = randomize.Struct(seed, &o, listingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Listing: %s", err)
	}

	count, err := Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, listingDBTypes, false, listingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Listing: %s", err)
	}

	count, err = Listings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
