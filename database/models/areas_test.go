// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAreas(t *testing.T) {
	t.Parallel()

	query := Areas()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAreasDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Areas().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AreaSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AreaExists(tx, o.AreaID)
	if err != nil {
		t.Errorf("Unable to check if Area exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AreaExists to return true, but got false.")
	}
}

func testAreasFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	areaFound, err := FindArea(tx, o.AreaID)
	if err != nil {
		t.Error(err)
	}

	if areaFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAreasBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Areas().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAreasOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Areas().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAreasAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	areaOne := &Area{}
	areaTwo := &Area{}
	if err = randomize.Struct(seed, areaOne, areaDBTypes, false, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}
	if err = randomize.Struct(seed, areaTwo, areaDBTypes, false, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = areaOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = areaTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Areas().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAreasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	areaOne := &Area{}
	areaTwo := &Area{}
	if err = randomize.Struct(seed, areaOne, areaDBTypes, false, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}
	if err = randomize.Struct(seed, areaTwo, areaDBTypes, false, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = areaOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = areaTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAreasInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAreasInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(areaColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAreaToManyListings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Area
	var b, c Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AreaID, a.AreaID)
	queries.Assign(&c.AreaID, a.AreaID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Listings().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AreaID, b.AreaID) {
			bFound = true
		}
		if queries.Equal(v.AreaID, c.AreaID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AreaSlice{&a}
	if err = a.L.LoadListings(tx, false, (*[]*Area)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Listings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Listings = nil
	if err = a.L.LoadListings(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Listings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAreaToManyAddOpListings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Area
	var b, c, d, e Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Listing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Listing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddListings(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.AreaID, first.AreaID) {
			t.Error("foreign key was wrong value", a.AreaID, first.AreaID)
		}
		if !queries.Equal(a.AreaID, second.AreaID) {
			t.Error("foreign key was wrong value", a.AreaID, second.AreaID)
		}

		if first.R.Area != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Area != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Listings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Listings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Listings().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAreaToManySetOpListings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Area
	var b, c, d, e Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Listing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetListings(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Listings().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetListings(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Listings().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AreaID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AreaID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.AreaID, d.AreaID) {
		t.Error("foreign key was wrong value", a.AreaID, d.AreaID)
	}
	if !queries.Equal(a.AreaID, e.AreaID) {
		t.Error("foreign key was wrong value", a.AreaID, e.AreaID)
	}

	if b.R.Area != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Area != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Area != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Area != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Listings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Listings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAreaToManyRemoveOpListings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Area
	var b, c, d, e Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, areaDBTypes, false, strmangle.SetComplement(areaPrimaryKeyColumns, areaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Listing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddListings(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Listings().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveListings(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Listings().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AreaID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AreaID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Area != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Area != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Area != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Area != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Listings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Listings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Listings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAreasReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAreasReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AreaSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAreasSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Areas().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	areaDBTypes = map[string]string{`AreaID`: `integer`, `Name`: `text`, `City`: `text`, `CardType`: `integer`}
	_           = bytes.MinRead
)

func testAreasUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(areaPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(areaAllColumns) == len(areaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, areaDBTypes, true, areaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAreasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(areaAllColumns) == len(areaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Area{}
	if err = randomize.Struct(seed, o, areaDBTypes, true, areaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, areaDBTypes, true, areaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(areaAllColumns, areaPrimaryKeyColumns) {
		fields = areaAllColumns
	} else {
		fields = strmangle.SetComplement(
			areaAllColumns,
			areaPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AreaSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAreasUpsert(t *testing.T) {
	t.Parallel()

	if len(areaAllColumns) == len(areaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Area{}
	if err = randomize.Struct(seed, &o, areaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Area: %s", err)
	}

	count, err := Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, areaDBTypes, false, areaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Area struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Area: %s", err)
	}

	count, err = Areas().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
