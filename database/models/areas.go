// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Area is an object representing the database table.
type Area struct {
	AreaID   int    `boil:"area_id" json:"area_id" toml:"area_id" yaml:"area_id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	City     string `boil:"city" json:"city" toml:"city" yaml:"city"`
	CardType int    `boil:"card_type" json:"card_type" toml:"card_type" yaml:"card_type"`

	R *areaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L areaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AreaColumns = struct {
	AreaID   string
	Name     string
	City     string
	CardType string
}{
	AreaID:   "area_id",
	Name:     "name",
	City:     "city",
	CardType: "card_type",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AreaWhere = struct {
	AreaID   whereHelperint
	Name     whereHelperstring
	City     whereHelperstring
	CardType whereHelperint
}{
	AreaID:   whereHelperint{field: "\"areas\".\"area_id\""},
	Name:     whereHelperstring{field: "\"areas\".\"name\""},
	City:     whereHelperstring{field: "\"areas\".\"city\""},
	CardType: whereHelperint{field: "\"areas\".\"card_type\""},
}

// AreaRels is where relationship names are stored.
var AreaRels = struct {
	Listings string
}{
	Listings: "Listings",
}

// areaR is where relationships are stored.
type areaR struct {
	Listings ListingSlice `boil:"Listings" json:"Listings" toml:"Listings" yaml:"Listings"`
}

// NewStruct creates a new relationship struct
func (*areaR) NewStruct() *areaR {
	return &areaR{}
}

// areaL is where Load methods for each relationship are stored.
type areaL struct{}

var (
	areaAllColumns            = []string{"area_id", "name", "city", "card_type"}
	areaColumnsWithoutDefault = []string{"area_id", "name", "city", "card_type"}
	areaColumnsWithDefault    = []string{}
	areaPrimaryKeyColumns     = []string{"area_id"}
)

type (
	// AreaSlice is an alias for a slice of pointers to Area.
	// This should generally be used opposed to []Area.
	AreaSlice []*Area

	areaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	areaType                 = reflect.TypeOf(&Area{})
	areaMapping              = queries.MakeStructMapping(areaType)
	areaPrimaryKeyMapping, _ = queries.BindMapping(areaType, areaMapping, areaPrimaryKeyColumns)
	areaInsertCacheMut       sync.RWMutex
	areaInsertCache          = make(map[string]insertCache)
	areaUpdateCacheMut       sync.RWMutex
	areaUpdateCache          = make(map[string]updateCache)
	areaUpsertCacheMut       sync.RWMutex
	areaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single area record from the query.
func (q areaQuery) One(exec boil.Executor) (*Area, error) {
	o := &Area{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for areas")
	}

	return o, nil
}

// All returns all Area records from the query.
func (q areaQuery) All(exec boil.Executor) (AreaSlice, error) {
	var o []*Area

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Area slice")
	}

	return o, nil
}

// Count returns the count of all Area records in the query.
func (q areaQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count areas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q areaQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if areas exists")
	}

	return count > 0, nil
}

// Listings retrieves all the listing's Listings with an executor.
func (o *Area) Listings(mods ...qm.QueryMod) listingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"listings\".\"area_id\"=?", o.AreaID),
	)

	query := Listings(queryMods...)
	queries.SetFrom(query.Query, "\"listings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"listings\".*"})
	}

	return query
}

// LoadListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (areaL) LoadListings(e boil.Executor, singular bool, maybeArea interface{}, mods queries.Applicator) error {
	var slice []*Area
	var object *Area

	if singular {
		object = maybeArea.(*Area)
	} else {
		slice = *maybeArea.(*[]*Area)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &areaR{}
		}
		args = append(args, object.AreaID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &areaR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AreaID) {
					continue Outer
				}
			}

			args = append(args, obj.AreaID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`listings`),
		qm.WhereIn(`listings.area_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load listings")
	}

	var resultSlice []*Listing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for listings")
	}

	if singular {
		object.R.Listings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &listingR{}
			}
			foreign.R.Area = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AreaID, foreign.AreaID) {
				local.R.Listings = append(local.R.Listings, foreign)
				if foreign.R == nil {
					foreign.R = &listingR{}
				}
				foreign.R.Area = local
				break
			}
		}
	}

	return nil
}

// AddListings adds the given related objects to the existing relationships
// of the area, optionally inserting them as new records.
// Appends related to o.R.Listings.
// Sets related.R.Area appropriately.
func (o *Area) AddListings(exec boil.Executor, insert bool, related ...*Listing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AreaID, o.AreaID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"area_id"}),
				strmangle.WhereClause("\"", "\"", 2, listingPrimaryKeyColumns),
			)
			values := []interface{}{o.AreaID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AreaID, o.AreaID)
		}
	}

	if o.R == nil {
		o.R = &areaR{
			Listings: related,
		}
	} else {
		o.R.Listings = append(o.R.Listings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &listingR{
				Area: o,
			}
		} else {
			rel.R.Area = o
		}
	}
	return nil
}

// SetListings removes all previously related items of the
// area replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Area's Listings accordingly.
// Replaces o.R.Listings with related.
// Sets related.R.Area's Listings accordingly.
func (o *Area) SetListings(exec boil.Executor, insert bool, related ...*Listing) error {
	query := "update \"listings\" set \"area_id\" = null where \"area_id\" = $1"
	values := []interface{}{o.AreaID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Listings {
			queries.SetScanner(&rel.AreaID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Area = nil
		}

		o.R.Listings = nil
	}
	return o.AddListings(exec, insert, related...)
}

// RemoveListings relationships from objects passed in.
// Removes related items from R.Listings (uses pointer comparison, removal does not keep order)
// Sets related.R.Area.
func (o *Area) RemoveListings(exec boil.Executor, related ...*Listing) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AreaID, nil)
		if rel.R != nil {
			rel.R.Area = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("area_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Listings {
			if rel != ri {
				continue
			}

			ln := len(o.R.Listings)
			if ln > 1 && i < ln-1 {
				o.R.Listings[i] = o.R.Listings[ln-1]
			}
			o.R.Listings = o.R.Listings[:ln-1]
			break
		}
	}

	return nil
}

// Areas retrieves all the records using an executor.
func Areas(mods ...qm.QueryMod) areaQuery {
	mods = append(mods, qm.From("\"areas\""))
	return areaQuery{NewQuery(mods...)}
}

// FindArea retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArea(exec boil.Executor, areaID int, selectCols ...string) (*Area, error) {
	areaObj := &Area{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"areas\" where \"area_id\"=$1", sel,
	)

	q := queries.Raw(query, areaID)

	err := q.Bind(nil, exec, areaObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from areas")
	}

	return areaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Area) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no areas provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(areaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	areaInsertCacheMut.RLock()
	cache, cached := areaInsertCache[key]
	areaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			areaAllColumns,
			areaColumnsWithDefault,
			areaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(areaType, areaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(areaType, areaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"areas\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"areas\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into areas")
	}

	if !cached {
		areaInsertCacheMut.Lock()
		areaInsertCache[key] = cache
		areaInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Area.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Area) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	areaUpdateCacheMut.RLock()
	cache, cached := areaUpdateCache[key]
	areaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			areaAllColumns,
			areaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update areas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"areas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, areaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(areaType, areaMapping, append(wl, areaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update areas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for areas")
	}

	if !cached {
		areaUpdateCacheMut.Lock()
		areaUpdateCache[key] = cache
		areaUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q areaQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for areas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for areas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AreaSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), areaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"areas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, areaPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in area slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all area")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Area) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no areas provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(areaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	areaUpsertCacheMut.RLock()
	cache, cached := areaUpsertCache[key]
	areaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			areaAllColumns,
			areaColumnsWithDefault,
			areaColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			areaAllColumns,
			areaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert areas, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(areaPrimaryKeyColumns))
			copy(conflict, areaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"areas\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(areaType, areaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(areaType, areaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert areas")
	}

	if !cached {
		areaUpsertCacheMut.Lock()
		areaUpsertCache[key] = cache
		areaUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Area record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Area) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Area provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), areaPrimaryKeyMapping)
	sql := "DELETE FROM \"areas\" WHERE \"area_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from areas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for areas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q areaQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no areaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from areas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for areas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AreaSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), areaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"areas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, areaPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from area slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for areas")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Area) Reload(exec boil.Executor) error {
	ret, err := FindArea(exec, o.AreaID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AreaSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AreaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), areaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"areas\".* FROM \"areas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, areaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AreaSlice")
	}

	*o = slice

	return nil
}

// AreaExists checks if the Area row exists.
func AreaExists(exec boil.Executor, areaID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"areas\" where \"area_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, areaID)
	}
	row := exec.QueryRow(sql, areaID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if areas exists")
	}

	return exists, nil
}
